'use client';

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Bug, 
  AlertTriangle, 
  CheckCircle, 
  XCircle,
  Shield,
  Search,
  Clock,
  ExternalLink,
  Download
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface VulnerabilityResult {
  id: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  cve?: string;
  cvss?: number;
  solution?: string;
  references?: string[];
}

export default function VulnerabilityScannerPage() {
  const [target, setTarget] = useState('');
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<VulnerabilityResult[]>([]);
  const [scanComplete, setScanComplete] = useState(false);
  const { toast } = useToast();

  const handleStartScan = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!target.trim()) {
      toast({
        title: "Error",
        description: "Please enter a target URL or IP address",
        variant: "destructive",
      });
      return;
    }

    setScanning(true);
    setProgress(0);
    setResults([]);
    setScanComplete(false);

    try {
      const response = await fetch('/api/security/vulnerability-scanner', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          target: target.trim(),
        }),
      });

      const data = await response.json();

      if (data.success) {
        // Simulate scanning progress
        const progressInterval = setInterval(() => {
          setProgress(prev => {
            if (prev >= 100) {
              clearInterval(progressInterval);
              setScanning(false);
              setScanComplete(true);
              setResults(data.vulnerabilities || []);
              toast({
                title: "Scan Complete",
                description: `Found ${data.vulnerabilities?.length || 0} vulnerabilities`,
              });
              return 100;
            }
            return prev + 10;
          });
        }, 500);
      } else {
        throw new Error(data.message || 'Failed to start scan');
      }
    } catch (error) {
      console.error('Error starting scan:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to start vulnerability scan",
        variant: "destructive",
      });
      setScanning(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500';
      case 'high': return 'bg-orange-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-blue-500';
      default: return 'bg-gray-500';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <XCircle className="h-4 w-4" />;
      case 'high': return <AlertTriangle className="h-4 w-4" />;
      case 'medium': return <AlertTriangle className="h-4 w-4" />;
      case 'low': return <CheckCircle className="h-4 w-4" />;
      default: return <Bug className="h-4 w-4" />;
    }
  };

  const exportResults = () => {
    const csvContent = results.map(vuln => 
      `"${vuln.severity}","${vuln.title}","${vuln.description}","${vuln.cve || ''}","${vuln.cvss || ''}"`
    ).join('\n');
    
    const blob = new Blob([`"Severity","Title","Description","CVE","CVSS"\n${csvContent}`], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-scan-${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  return (
    <div className="container mx-auto py-8 max-w-6xl">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Vulnerability Scanner</h1>
        <p className="text-muted-foreground">
          Comprehensive security vulnerability assessment and detection for web applications and servers.
        </p>
      </div>

      <div className="grid gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bug className="h-5 w-5 text-primary" />
              Start Vulnerability Scan
            </CardTitle>
            <CardDescription>
              Enter a target URL or IP address to perform security vulnerability assessment
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleStartScan} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="target">Target URL or IP Address</Label>
                <Input
                  id="target"
                  type="text"
                  placeholder="https://example.com or 192.168.1.1"
                  value={target}
                  onChange={(e) => setTarget(e.target.value)}
                  className="font-mono"
                  disabled={scanning}
                />
              </div>

              <Button 
                type="submit" 
                className="w-full" 
                disabled={scanning}
              >
                {scanning ? (
                  <>
                    <Search className="mr-2 h-4 w-4 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  <>
                    <Search className="mr-2 h-4 w-4" />
                    Start Scan
                  </>
                )}
              </Button>
            </form>

            {scanning && (
              <div className="mt-4 space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Scanning Progress</span>
                  <span className="text-sm text-muted-foreground">{progress}%</span>
                </div>
                <Progress value={progress} className="w-full" />
                <p className="text-sm text-muted-foreground">
                  Checking for common vulnerabilities and security issues...
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        {scanComplete && (
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5 text-primary" />
                  Scan Results
                </CardTitle>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={exportResults}
                  className="gap-2"
                >
                  <Download className="h-4 w-4" />
                  Export CSV
                </Button>
              </div>
              <CardDescription>
                Found {results.length} vulnerabilities for {target}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="summary" className="w-full">
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="summary">Summary</TabsTrigger>
                  <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
                  <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
                </TabsList>
                
                <TabsContent value="summary" className="space-y-4">
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center p-4 bg-red-50 rounded-lg border border-red-200">
                      <p className="text-sm text-red-600">Critical</p>
                      <p className="text-2xl font-bold text-red-700">
                        {results.filter(r => r.severity === 'critical').length}
                      </p>
                    </div>
                    <div className="text-center p-4 bg-orange-50 rounded-lg border border-orange-200">
                      <p className="text-sm text-orange-600">High</p>
                      <p className="text-2xl font-bold text-orange-700">
                        {results.filter(r => r.severity === 'high').length}
                      </p>
                    </div>
                    <div className="text-center p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                      <p className="text-sm text-yellow-600">Medium</p>
                      <p className="text-2xl font-bold text-yellow-700">
                        {results.filter(r => r.severity === 'medium').length}
                      </p>
                    </div>
                    <div className="text-center p-4 bg-blue-50 rounded-lg border border-blue-200">
                      <p className="text-sm text-blue-600">Low</p>
                      <p className="text-2xl font-bold text-blue-700">
                        {results.filter(r => r.severity === 'low').length}
                      </p>
                    </div>
                  </div>
                </TabsContent>
                
                <TabsContent value="vulnerabilities" className="space-y-4">
                  {results.length === 0 ? (
                    <Alert>
                      <CheckCircle className="h-4 w-4" />
                      <AlertDescription>
                        No vulnerabilities found. The target appears to be secure.
                      </AlertDescription>
                    </Alert>
                  ) : (
                    <div className="space-y-4">
                      {results.map((vuln, index) => (
                        <Card key={index} className="border-l-4 border-l-red-500">
                          <CardContent className="p-4">
                            <div className="flex items-start justify-between">
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-2">
                                  {getSeverityIcon(vuln.severity)}
                                  <h3 className="font-semibold">{vuln.title}</h3>
                                  <Badge className={getSeverityColor(vuln.severity)}>
                                    {vuln.severity.toUpperCase()}
                                  </Badge>
                                </div>
                                <p className="text-sm text-muted-foreground mb-2">
                                  {vuln.description}
                                </p>
                                {vuln.cve && (
                                  <p className="text-sm">
                                    <strong>CVE:</strong> {vuln.cve}
                                  </p>
                                )}
                                {vuln.cvss && (
                                  <p className="text-sm">
                                    <strong>CVSS Score:</strong> {vuln.cvss}
                                  </p>
                                )}
                                {vuln.solution && (
                                  <p className="text-sm mt-2">
                                    <strong>Solution:</strong> {vuln.solution}
                                  </p>
                                )}
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  )}
                </TabsContent>
                
                <TabsContent value="recommendations" className="space-y-4">
                  <Alert>
                    <Shield className="h-4 w-4" />
                    <AlertDescription>
                      <strong>Security Recommendations:</strong>
                    </AlertDescription>
                  </Alert>
                  
                  <div className="space-y-3">
                    <div className="flex items-start gap-3">
                      <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="font-medium">Regular Security Updates</p>
                        <p className="text-sm text-muted-foreground">
                          Keep all software components updated with latest security patches
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-start gap-3">
                      <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="font-medium">Security Headers</p>
                        <p className="text-sm text-muted-foreground">
                          Implement proper security headers (HSTS, CSP, X-Frame-Options)
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-start gap-3">
                      <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="font-medium">SSL/TLS Configuration</p>
                        <p className="text-sm text-muted-foreground">
                          Ensure strong SSL/TLS configuration with latest protocols
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-start gap-3">
                      <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="font-medium">Regular Security Scans</p>
                        <p className="text-sm text-muted-foreground">
                          Perform regular vulnerability assessments and penetration testing
                        </p>
                      </div>
                    </div>
                  </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
