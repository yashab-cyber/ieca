generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String               @id @default(cuid())
  email            String               @unique
  password         String
  name             String
  phone            String?
  linkedin         String?
  github           String?
  role             UserRole             @default(MEMBER)
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  lastLoginAt      DateTime?
  activities       Activity[]
  applications     Application[]
  blogPosts        BlogPost[]
  chatMessages     ChatMessage[]
  comments         Comment[]
  emailConfigs     EmailConfig[]
  createdTemplates EmailTemplate[]
  chatMemberships  GlobalChatMember[]   @relation("ChatMemberships")
  sentMessages     GlobalChatMessage[]  @relation("SentMessages")
  messageReactions GlobalChatReaction[] @relation("MessageReactions")
  createdRooms     GlobalChatRoom[]     @relation("CreatedRooms")
  profile          UserProfile?
  securityUsage    SecurityToolUsage[]
  securityScans    SecurityScan[]
  vulnerabilityReports VulnerabilityReport[]
  hashCrackSessions HashCrackSession[]

  @@map("users")
}

model UserProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  bio        String?
  avatar     String?
  skills     String[]
  experience String?
  location   String?
  website    String?
  isPublic   Boolean  @default(false)
  joinedAt   DateTime @default(now())
  reputation Int      @default(0)
  points     Int      @default(0)
  rank       String   @default("Rookie")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Application {
  id              String            @id @default(cuid())
  userId          String?
  name            String
  email           String
  phone           String
  linkedin        String?
  github          String?
  skills          String[]
  statement       String
  isIndianCitizen Boolean
  status          ApplicationStatus @default(PENDING)
  reviewedBy      String?
  reviewedAt      DateTime?
  reviewNotes     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User?             @relation(fields: [userId], references: [id])

  @@map("applications")
}

model ChatMessage {
  id        String      @id @default(cuid())
  userId    String?
  message   String
  response  String?
  role      MessageRole @default(USER)
  isRead    Boolean     @default(false)
  metadata  Json?
  createdAt DateTime    @default(now())
  user      User?       @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

model BlogPost {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String
  excerpt     String?
  coverImage  String?
  authorId    String
  status      PostStatus @default(DRAFT)
  tags        String[]
  isPublished Boolean    @default(false)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id])
  comments    Comment[]

  @@map("blog_posts")
}

model Comment {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  content    String
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  post       BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Resource {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String?
  fileUrl     String?
  category    String
  tags        String[]
  authorName  String
  difficulty  Difficulty @default(BEGINNER)
  status      PostStatus @default(DRAFT)
  downloads   Int        @default(0)
  views       Int        @default(0)
  rating      Float      @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("resources")
}

model Activity {
  id          String       @id @default(cuid())
  userId      String
  action      ActivityType
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])

  @@map("activities")
}

model SecurityTool {
  id          String            @id @default(cuid())
  name        String
  type        SecurityToolType
  description String
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  usage       SecurityToolUsage[]

  @@map("security_tools")
}

model SecurityToolUsage {
  id           String         @id @default(cuid())
  toolId       String
  userId       String
  sessionId    String
  inputData    Json
  outputData   Json?
  ipAddress    String?
  userAgent    String?
  status       UsageStatus    @default(PENDING)
  error        String?
  createdAt    DateTime       @default(now())
  completedAt  DateTime?
  tool         SecurityTool   @relation(fields: [toolId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  ipLogs       IpLogEntry[]

  @@map("security_tool_usage")
}

model IpLogEntry {
  id           String      @id @default(cuid())
  sessionId    String
  targetUrl    String
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  region       String?
  timezone     String?
  isp          String?
  device       String?
  browser      String?
  os           String?
  referer      String?
  clickedAt    DateTime?
  metadata     Json?
  createdAt    DateTime    @default(now())
  usageId      String
  usage        SecurityToolUsage @relation(fields: [usageId], references: [id])

  @@map("ip_log_entries")
}

model SecurityScan {
  id          String         @id @default(cuid())
  userId      String
  scanType    ScanType
  target      String
  results     Json
  status      ScanStatus     @default(PENDING)
  progress    Int            @default(0)
  startedAt   DateTime       @default(now())
  completedAt DateTime?
  error       String?
  user        User           @relation(fields: [userId], references: [id])

  @@map("security_scans")
}

model VulnerabilityReport {
  id          String           @id @default(cuid())
  userId      String
  title       String
  description String
  severity    VulnerabilitySeverity
  target      String
  proof       String?
  status      ReportStatus     @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])

  @@map("vulnerability_reports")
}

model HashCrackSession {
  id          String         @id @default(cuid())
  userId      String
  hash        String
  hashType    HashType
  dictionary  String?
  rules       String?
  status      CrackStatus    @default(PENDING)
  result      String?
  progress    Int            @default(0)
  startedAt   DateTime       @default(now())
  completedAt DateTime?
  user        User           @relation(fields: [userId], references: [id])

  @@map("hash_crack_sessions")
}

model ContactForm {
  id        String      @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  type      ContactType @default(GENERAL)
  status    FormStatus  @default(UNREAD)
  isUrgent  Boolean     @default(false)
  createdAt DateTime    @default(now())

  @@map("contact_forms")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isGlobal  Boolean          @default(false)
  isRead    Boolean          @default(false)
  expiresAt DateTime?
  createdAt DateTime         @default(now())

  @@map("notifications")
}

model GlobalChatRoom {
  id          String              @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean             @default(false)
  createdBy   String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  members     GlobalChatMember[]
  messages    GlobalChatMessage[]
  creator     User                @relation("CreatedRooms", fields: [createdBy], references: [id])

  @@map("global_chat_rooms")
}

model GlobalChatMessage {
  id          String                 @id @default(cuid())
  roomId      String
  userId      String
  content     String?
  messageType GlobalMessageType      @default(TEXT)
  isEdited    Boolean                @default(false)
  replyToId   String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  attachments GlobalChatAttachment[]
  replyTo     GlobalChatMessage?     @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     GlobalChatMessage[]    @relation("MessageReplies")
  room        GlobalChatRoom         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User                   @relation("SentMessages", fields: [userId], references: [id])
  reactions   GlobalChatReaction[]

  @@map("global_chat_messages")
}

model GlobalChatAttachment {
  id           String            @id @default(cuid())
  messageId    String
  fileName     String
  originalName String
  mimeType     String
  fileSize     Int
  downloadUrl  String
  uploadedAt   DateTime          @default(now())
  message      GlobalChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("global_chat_attachments")
}

model GlobalChatMember {
  id         String         @id @default(cuid())
  roomId     String
  userId     String
  role       ChatMemberRole @default(MEMBER)
  joinedAt   DateTime       @default(now())
  lastSeenAt DateTime?
  room       GlobalChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User           @relation("ChatMemberships", fields: [userId], references: [id])

  @@unique([roomId, userId])
  @@map("global_chat_members")
}

model GlobalChatReaction {
  id        String            @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime          @default(now())
  message   GlobalChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User              @relation("MessageReactions", fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
  @@map("global_chat_reactions")
}

model EmailTemplate {
  id          String                  @id @default(cuid())
  name        String
  type        EmailTemplateType
  subject     String
  htmlContent String
  textContent String?
  description String?
  isActive    Boolean                 @default(true)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  createdBy   String?
  emailLogs   EmailLog[]
  variables   EmailTemplateVariable[]
  creator     User?                   @relation(fields: [createdBy], references: [id])

  @@map("email_templates")
}

model EmailTemplateVariable {
  id           String        @id @default(cuid())
  templateId   String
  name         String
  description  String?
  required     Boolean       @default(false)
  defaultValue String?
  template     EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, name])
  @@map("email_template_variables")
}

model EmailLog {
  id           String         @id @default(cuid())
  templateId   String?
  recipient    String
  subject      String
  status       EmailStatus    @default(PENDING)
  messageId    String?
  errorMessage String?
  attempts     Int            @default(0)
  scheduledAt  DateTime?
  sentAt       DateTime?
  deliveredAt  DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  metadata     Json?
  template     EmailTemplate? @relation(fields: [templateId], references: [id])

  @@index([recipient])
  @@index([status])
  @@index([createdAt])
  @@map("email_logs")
}

model EmailQueue {
  id           String      @id @default(cuid())
  recipient    String
  subject      String
  htmlContent  String
  textContent  String?
  priority     Int         @default(5)
  scheduledAt  DateTime?
  attempts     Int         @default(0)
  maxAttempts  Int         @default(3)
  status       QueueStatus @default(PENDING)
  errorMessage String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  metadata     Json?

  @@index([status])
  @@index([scheduledAt])
  @@index([priority])
  @@map("email_queue")
}

model EmailConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  encrypted Boolean  @default(false)
  updatedAt DateTime @updatedAt
  updatedBy String?
  updater   User?    @relation(fields: [updatedBy], references: [id])

  @@map("email_config")
}

model EmailStats {
  id             String   @id @default(cuid())
  date           DateTime @unique @db.Date
  totalSent      Int      @default(0)
  totalDelivered Int      @default(0)
  totalOpened    Int      @default(0)
  totalClicked   Int      @default(0)
  totalFailed    Int      @default(0)
  totalBounced   Int      @default(0)

  @@map("email_stats")
}

enum UserRole {
  ADMIN
  MODERATOR
  MEMBER
  PENDING
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum MessageRole {
  USER
  MODEL
  SYSTEM
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ActivityType {
  LOGIN
  LOGOUT
  PROFILE_UPDATE
  APPLICATION_SUBMIT
  CHAT_MESSAGE
  RESOURCE_DOWNLOAD
  BLOG_POST_CREATE
  COMMENT_CREATE
}

enum ContactType {
  GENERAL
  THREAT_REPORT
  SUPPORT
  PARTNERSHIP
  MEDIA
}

enum FormStatus {
  UNREAD
  READ
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  SECURITY_ALERT
}

enum GlobalMessageType {
  TEXT
  FILE
  IMAGE
  CODE
  DOCUMENT
}

enum ChatMemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum EmailTemplateType {
  WELCOME
  APPLICATION_CONFIRMATION
  APPLICATION_STATUS
  PASSWORD_RESET
  NOTIFICATION
  MARKETING
  TRANSACTIONAL
  SYSTEM
  CUSTOM
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  FAILED
  BOUNCED
  SPAM
  UNSUBSCRIBED
}

enum QueueStatus {
  PENDING
  PROCESSING
  SENT
  FAILED
  CANCELLED
}

enum SecurityToolType {
  IP_LOGGER
  PORT_SCANNER
  VULNERABILITY_SCANNER
  HASH_CRACKER
  SUBDOMAIN_FINDER
  DNS_LOOKUP
  WHOIS_LOOKUP
  SSL_CHECKER
  HEADER_ANALYZER
  URL_EXPANDER
  PHISHING_DETECTOR
  MALWARE_SCANNER
}

enum UsageStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ScanType {
  PORT_SCAN
  VULN_SCAN
  SUBDOMAIN_SCAN
  DNS_SCAN
  SSL_SCAN
  HEADER_SCAN
}

enum ScanStatus {
  PENDING
  SCANNING
  COMPLETED
  FAILED
  CANCELLED
}

enum VulnerabilitySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  VERIFIED
  FIXED
  REJECTED
  DUPLICATE
}

enum HashType {
  MD5
  SHA1
  SHA256
  SHA512
  BCRYPT
  SCRYPT
  NTLM
  LM
}

enum CrackStatus {
  PENDING
  CRACKING
  CRACKED
  FAILED
  TIMEOUT
}

model ShortenedUrl {
  id          String    @id @default(cuid())
  originalUrl String
  shortCode   String    @unique
  customAlias String?   @unique
  description String?
  password    String?   // Hashed password for protected URLs
  userId      String
  clicks      Int       @default(0)
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("shortened_urls")
}
